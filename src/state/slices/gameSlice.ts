import { createSlice } from '@reduxjs/toolkit';
import { Board, GameState } from 'utils/types';

const emptyBoards = {
    [Board.Board9]: new Array(9).fill(''),
    [Board.Board36]: new Array(36).fill(''),
    [Board.Board81]: new Array(81).fill('')
}

const initialGameState: GameState = {
    isRunning: false,
    totalTime: 0,
    currentTime: 0,
    winHistory: [],
    currentWin: undefined,
    boardType: Board.Board9,
    boardStatus: emptyBoards
};

/**
 * This portion of the state is used to control the layout of the app. For a simple
 * app such as this, the only requirement is to keep track of what person is selected
 * and the search string
 * */
const gameSlice = createSlice({
    name: 'game',
    initialState: initialGameState,
    reducers: {
        gameStarted: (state) => {
            state.isRunning = true;
            state.currentTime = 0;
            state.currentWin = undefined;
            state.boardStatus = emptyBoards;
        },
        gameTimeIncremented: (state) => {
            state.totalTime = state.totalTime + 1;
            state.currentTime = state.currentTime + 1;
        },
        gameWon: (state, { payload }) => {
            state.isRunning = false;
            state.currentWin = payload;
            const newWinHistory = [...state.winHistory];
            newWinHistory.push(payload);
            state.winHistory = newWinHistory;
        },
        boardTypeChanged: (state, { payload }) => {
            state.boardType = payload;
        },
        boardStatusChanged: (state, { payload }) => {
            state.boardStatus[state.boardType] = payload;
        },
        matchReset: (state) => {
            return initialGameState;
        }
    }
});

// Redux actions automatically generated by redux toolkit based on the reducer names
export const { gameStarted, gameWon, gameTimeIncremented, matchReset, boardTypeChanged, boardStatusChanged } = gameSlice.actions;

export default gameSlice;